syntax="proto3";
package reservation;
import "google/protobuf/timestamp.proto";

// Reservation Status for a given time period
enum ReservationStatus {
    RESERVATION_STATUS_UNKNOWN = 0;
    RESERVATION_STATUS_PENDING = 1;
    RESERVATION_STATUS_CONFIRMED = 2;
    RESERVATION_STATUS_LOCKED = 3;
}
// when a reservation is updated, record the update type
enum ReservationUpdateType {
    RESERVATION_UPDATE_TYPE_UNKNOWN = 0;
    RESERVATION_UPDATE_TYPE_CREATE = 1;
    RESERVATION_UPDATE_TYPE_UPDATE = 2;
    RESERVATION_UPDATE_TYPE_DELETE = 3;
}



// core reservation object,Contains the reservation information for a reservation
// if ListReservationRequest, only id will be populated
message Reservation {
    // unique id for the reservation if put into ReservationRequest, id should be empty
    string id = 1;
    // user_id for the reservation
    string user_id = 2;
    // reservation status,used for reservation update
    ReservationStatus status = 3;

    // The resource that is being reserved
    string resource_id = 4;
    // start time of the reservation
    google.protobuf.Timestamp start = 5;
    // end time of the reservation
    google.protobuf.Timestamp end = 6;
    // extra fields
    string note = 7;
}
// To make a reservation, send a ReservationRequest with Reservation object (id should be empty)
message ReserveRequest {
    Reservation reservation = 1;
}
message ReserveResponse {
    Reservation reservation = 1;
}
//  To update a reservation, send a UpdateRequest only note field will be updated
message UpdateRequest {
    string note =2;
}
message UpdateResponse {
    Reservation reservation = 1;
}
message ConfirmRequest {
    string id = 1;
}
message ConfirmResponse {
    Reservation reservation = 1;
}
message CancelRequest {
    string id = 1;
}
message CancelResponse {
    Reservation reservation = 1;
}
// To get a reservation, send a GetRequest with reservation id
message GetRequest {
    string id = 1;
}
// GetResponse will return a Reservation object
message GetResponse {
    Reservation reservation = 1;
}
// query reservation by user_id, resource_id, start time, end time and status
message ReservationQuery{
    // resource_id for the reservation query， if empty, query all resources
    string resource_id = 1;
    // user_id for the reservation query， if empty, query all users
    string user_id = 2;
    // use status to filter result. If UNKNOWN, return all reservations
    ReservationStatus status = 3;
    // start time of the reservation query,if 0, use Infinity for start time
    google.protobuf.Timestamp start = 4;
    // end time of the reservation query , if 0, use Infinity for end time
    google.protobuf.Timestamp end = 5;
}


// To query reservations, send a QueryRequest
message QueryRequest {
    ReservationQuery query = 1;
}
// Client can listen to reservation updates by sending a ListRequest
message ListenRequest {

}
// Server will send ListResponse to client  in streaming response
message ListenResponse {
    // update type
    ReservationUpdateType op =1;
    // id for updated reservation
    Reservation reservation = 2;
}
// Reservation Service
service ReservationService {
    // make a reservation
    rpc reserve(ReserveRequest) returns (ReserveResponse);
    // confirm a pending reservation,if reservation is not pending, do nothing
    rpc confirm(ConfirmRequest) returns (ConfirmResponse);
    // update a reservation note
    rpc update(UpdateRequest) returns ( UpdateResponse);
    //cancel a reservation by id
    rpc cancel(CancelRequest) returns (CancelResponse);
    // get a reservation by id
    rpc get(GetRequest) returns (GetResponse);
    // query reservations by resource_id, user_id, status, start time, end time
    rpc query(QueryRequest) returns (stream Reservation);
    // another system could monitor newly added/updated/cancelled/confirmed reservations
    rpc listen(ListenRequest) returns (ListenResponse);
}
